<#@ include file="./HelperMethod.tt" #>
using System.Collections.Generic;

namespace ProceduralLevel.Common.Event
{
<# for(int x = 0; x < tCount; x++) { #>
	public class Event<#= listGenerics(x) #>
	{
		public delegate void Callback(<#= listParams(x) #>);

		protected List<Callback> m_Listeners = new List<Callback>();

		public void Invoke(<#= listParams(x) #>)
		{
			for(int x = m_Listeners.Count-1; x >= 0; x--)
			{
				m_Listeners[x](<#= listArgs(x) #>);
			}
		}

		public void AddListener(Callback listener)
		{
			m_Listeners.Add(listener);
		}

		public bool RemoveListener(Callback listener)
		{
			return m_Listeners.Remove(listener);
		}

		public void RemoveAllListeners()
		{
			m_Listeners.Clear();
		}

		public override string ToString()
		{
			return string.Format("[Event, ListenerCount: {<#= x #>}, Types: <#= listVars("{{{0}}}", x) #>]", 
				<#= listVars("typeof(T{0}).Name", x) #><#= (x > 0? ", ": "") #> m_Listeners.Count);
		}
	}

<# } #>
}
