<# 
string[] lowerCase = new string[] { "char", "bool", "byte", "short", "ushort", "int", "uint", "long", "ulong", "string", "float", "double" };
string[] upperCase = new string[] { "Char", "Bool", "Byte", "Short", "UShort", "Int", "UInt", "Long", "ULong", "String", "Float", "Double" };
#>
<# Action<string, string> generateWrite = (lCase, uCase) => { #>
		public BinaryBufferWriter Write(<#=lCase #>[] arr)
		{
			return Write(arr, 0, arr.Length);
		}

		public BinaryBufferWriter Write(List<<#=lCase #>> list)
		{
			return Write(list, 0, list.Count);
		}

		public BinaryBufferWriter Write(<#=lCase #>[] arr, int offset, int length)
		{
			Write(length);
			for(int x = 0; x < length; ++x)
			{
				Write(arr[offset+x]);
			}
			return this;
		}

		public BinaryBufferWriter Write(List<<#=lCase #>> list, int offset, int count)
		{
			Write(count);
			for(int x = 0; x < count; ++x)
			{
				Write(list[offset+x]);
			}
			return this;
		}
<# };#>
<# Action<string, string> generateRead = (lCase, uCase) => { #>
		public void Read(List<<#=lCase #>> list, bool append = false)
		{
			if(!append)
			{
				list.Clear();
			}
			int count = ReadInt();
			for(int x = 0; x < count; ++x)
			{
				list.Add(Read<#=uCase #>());
			}
		}

		public int Read(<#=lCase #>[] arr, int offset = 0)
		{
			int length = ReadInt();
			for(int x = 0; x < length; ++x)
			{
				arr[x+offset] = Read<#=uCase #>();
			}
			return length;
		}

		public <#=lCase #>[] Read<#=uCase #>Array()
		{
			int length = ReadInt();
			<#=lCase #>[] arr = new <#=lCase #>[length];
			for(int x = 0; x < length; ++x)
			{
				arr[x] = Read<#=uCase #>();
			}
			return arr;
		}
<# };#>